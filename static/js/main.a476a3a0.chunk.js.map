{"version":3,"sources":["utils/API.js","utils/LocationContext.js","assets/search_icon.svg","components/Search.js","components/ForecastCard.js","components/NotFound.js","components/WeatherData.js","components/Display.js","components/Jumbotron.js","pages/Main.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","baseURL","units","key","API","searchLocation","search","a","get","res","console","log","data","forecast","list","coord","lat","lon","uv","response","weather","LocationContext","createContext","LocationProvider","children","useState","location","setLocation","Provider","value","Search","useContext","setSearch","handleSearch","e","type","then","className","onChange","preventDefault","target","trim","onKeyDown","placeholder","onClick","src","search_icon","alt","ForecastCard","date","icon","temp","hum","des","path","substring","NotFound","code","message","WeatherData","feels","wind","loc","coun","color","setColor","useEffect","val","colorState","Display","hasOwnProperty","cod","main","humidity","feels_like","name","speed","description","country","sys","arr","nth","filter","i","map","day","dt_txt","dt","renderWeather","Jumbotron","Main","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a476a3a0.chunk.js","sourcesContent":["const axios = require('axios')\r\n\r\nconst baseURL = 'https://api.openweathermap.org/data/2.5/'\r\nconst units = '&units=imperial'\r\nconst key = 'da43e57b5117e805c210e2b7768d7d30'\r\n\r\nconst API = {\r\n  // performs 3 asynchronous axios calls. gets weather data and forecast data for a location, then uses the coordinates from the first response to get the uv index for that location\r\n  searchLocation: async function(search) {\r\n    let res\r\n    let uv\r\n    let forecast\r\n    let data\r\n    try {\r\n      //current weather data\r\n      res = await axios.get(`${baseURL}weather?${search + units}&appid=${key}`)\r\n      console.log(res.data)\r\n      forecast = await axios.get(`${baseURL}forecast?${search + units}&appid=${key}`)\r\n      console.log(forecast.data.list)\r\n      try {\r\n        //uv index data\r\n        uv = await axios.get(`${baseURL}uvi?&appid=${key + units}&lat=${res.data.coord.lat}&lon=${res.data.coord.lon}`)\r\n        console.log(uv.data)\r\n      }\r\n      catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error)\r\n      return error.response.data\r\n    }\r\n    data = {\r\n        weather: res.data,\r\n        forecast: forecast.data.list,\r\n        uv: uv.data\r\n    }\r\n    return data\r\n  },\r\n}\r\n\r\nexport default API","import React, { createContext, useState} from 'react'\r\n\r\nexport const LocationContext = createContext()\r\n\r\nexport const LocationProvider = ({children}) => {\r\n  const [location, setLocation] = useState({})\r\n\r\n  return (\r\n    <LocationContext.Provider value = {[location, setLocation]}>\r\n      {children}\r\n    </LocationContext.Provider>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/search_icon.f0a473f9.svg\";","import React , {useState, useContext} from 'react'\r\nimport API from '../utils/API'\r\nimport { LocationContext } from '../utils/LocationContext'\r\nimport search_icon from '../assets/search_icon.svg' \r\n\r\nexport default function Search() {\r\n  const [, setLocation] = useContext(LocationContext)\r\n  const [search, setSearch] = useState('')\r\n\r\n  function handleChange(e) {\r\n    e.preventDefault()\r\n    const { value } = e.target\r\n    setSearch(value.trim())\r\n  }\r\n\r\n  // called when the 'enter' key is pushed or the search button is clicked\r\n  function handleSearch(e) {\r\n    if (e.key === 'Enter' || e.type === 'click') {\r\n      API.searchLocation(`q=${search}`).then((res) => {\r\n        setLocation(res)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='flex justify-center mb-4'>\r\n      <input onChange={handleChange} onKeyDown={handleSearch} placeholder='Location' value={search}\r\n        className='m-2 bg-gray-400 bg-opacity-50 pl-2 outline-none rounded-xl ring-2 ring-gray-600 hover:bg-gray-200 focus:bg-gray-200' />\r\n      <button onClick={handleSearch} > <img src={search_icon} alt={'search icon'} /> </button>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function ForecastCard({ date, icon, temp, hum, des}) {\r\n  const path = `http://openweathermap.org/img/wn/${icon}.png`\r\n\r\n  return (\r\n    <div className='text-gray-300 text-lg tracking-wide leading-loose ring-gray-600 ring-2 p-6 rounded-xl mb-4'>\r\n      <div className='border-b border-gray-600 mb-4'>\r\n        <div className='space-x-2 flex '>\r\n          <h2 className='font-semibold text-xl inline-block self-center'> {date.substring(5, 10)} </h2> \r\n          <img src={path} alt='weather icon' className='inline-block' />\r\n        </div>\r\n        <p className='capitalize mb-2'> {des} </p>\r\n      </div>\r\n      <p> Temp: {temp} Â°F </p>\r\n      <p> Humidity: {hum}% </p>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function NotFound({ code, message }) {\r\n  return (\r\n    <p className='text-gray-300 text-3xl font-thin ring-gray-600 ring-4 rounded-xl p-12 '> {code}: {message} </p>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\n// const moment = require('moment')\r\n\r\nexport default function WeatherData ({ temp, feels, hum, wind, uv, date, loc, icon, coun, des}) {\r\n  const [ color, setColor ] = useState('')\r\n  useEffect(() => {\r\n    colorState(uv)\r\n  })\r\n\r\n  function colorState(val) {\r\n    switch(true) {\r\n      case val < 3:\r\n        setColor('bg-green-400')\r\n      break;\r\n      case val < 6:\r\n        setColor('bg-yellow-300')\r\n      break;\r\n      case val < 8:\r\n        setColor('bg-yellow-500')\r\n      break;\r\n      case val < 11:\r\n        setColor('bg-red-500')\r\n      break;\r\n      default:\r\n        setColor('bg-purple-500')\r\n      break;\r\n    }\r\n  }\r\n\r\n  // const formatted = moment(date).format('dddd, Do, h:mm A')\r\n  const path = `http://openweathermap.org/img/wn/${icon}.png`\r\n  return (\r\n    <div className='text-gray-300 text-xl tracking-wide leading-loose ring-gray-600 ring-2 p-8 rounded-xl mb-4'>\r\n      <div className='space-x-2 flex border-b border-gray-600 mb-4'>\r\n        <h2 className='font-semibold text-2xl inline-block self-center capitalize'> {loc}, {coun} â {des} </h2> \r\n        <img src={path} alt='weather icon' className='inline-block' />\r\n      </div>\r\n      \r\n      <p> Temperature: {temp} Â°F {/*{temp != feels ? `, but feels like ${feels}Â°F` : ''}*/} </p>\r\n      <p> Humidity: {hum}% </p>\r\n      <p> Wind Speed: {wind} mph </p>\r\n      <p> UVI: <span className={`${color} rounded bg-opacity-75 px-1 text-black font-semibold`}> {uv} </span> </p>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from 'react'\r\nimport { LocationContext } from '../utils/LocationContext'\r\nimport ForecastCard from './ForecastCard'\r\nimport NotFound from './NotFound'\r\nimport WeatherData from './WeatherData'\r\n\r\nexport default function Display() {\r\n  const [location, ] = useContext(LocationContext)\r\n\r\n  function renderWeather(data) {\r\n    if (data.hasOwnProperty('message')) {\r\n      return (\r\n        <NotFound code={data.cod} message={data.message} />\r\n      )\r\n    } else if (data.hasOwnProperty('weather')) {\r\n      const {temp, humidity, feels_like} = data.weather.main\r\n      const { name } = data.weather\r\n      const { speed } = data.weather.wind\r\n      const { value, date } = data.uv\r\n      const { icon, description } = data.weather.weather[0]\r\n      const { country } = data.weather.sys\r\n      const fiveDay = (arr, nth) => arr.filter((e, i) => i % nth === nth -1) // need to fix this to include index 0\r\n      return (\r\n        <div>\r\n          <WeatherData temp={temp} feels={feels_like} hum={humidity} wind={speed} uv={value} loc={name} date={date} icon={icon} coun={country} des={description} />\r\n          <div className='flex space-x-4' >\r\n            {fiveDay(data.forecast, 8).map(day => {\r\n              return (\r\n                <ForecastCard key={day.dt} temp={day.main.temp} hum={day.main.humidity} icon={day.weather[0].icon} date={day.dt_txt} des={day.weather[0].description}/>\r\n              )      \r\n            })}\r\n          </div>\r\n        </div> \r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div className='flex justify-evenly'>\r\n        {renderWeather(location)}\r\n      </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Jumbotron() {\r\n  return (\r\n    <div className='p-4 mb-4 bg-gray-700'>\r\n      <h1 className='text-center text-3xl font-semibold tracking-wide text-gray-200'> WeatherDash </h1>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useContext } from 'react'\r\nimport Search from '../components/Search'\r\nimport Display from '../components/Display'\r\nimport { LocationContext } from '../utils/LocationContext'\r\nimport Jumbotron from '../components/Jumbotron'\r\nimport API from '../utils/API'\r\n\r\nexport default function Main(){\r\n  const [, setLocation] = useContext(LocationContext)\r\n  \r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n      API.searchLocation(`lat=${pos.coords.latitude}&lon=${pos.coords.longitude}`).then((res) => {\r\n        setLocation(res)\r\n      })\r\n    })\r\n  }, [])\r\n  return (\r\n    <div className='h-screen w-screen bg-gray-800'>\r\n      <Jumbotron />\r\n      <Search />\r\n      <Display />\r\n    </div>\r\n  )\r\n}","import './App.css';\n\nimport React from 'react';\nimport './App.css';\nimport Main from './pages/Main';\nimport { LocationProvider } from './utils/LocationContext';\n\nfunction App() {\n  return (\n    <LocationProvider>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </LocationProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}